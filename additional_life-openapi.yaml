openapi: "3.1.0"
info:
  title: "additional_life API"
  description: "additional_life API"
  version: "1.0.0"
servers:
  - url: "https://additional_life"
tags:
  - name: "Item API"
    description: "Item management operations"
paths:
  /api/v1/items:
    post:
      summary: "Create a new item"
      description: "Creates a new item with the provided data"
      operationId: ""
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ItemRequest"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemResponse"
    get:
      summary: "Get paginated list of all active items"
      description: "Retrieves a paginated list of all active items with sorting options"
      operationId: ""
      parameters:
        - name: "page"
          in: "query"
          required: false
          schema:
            type: "integer"
            format: "int32"
            default: "0"
        - name: "size"
          in: "query"
          required: false
          schema:
            type: "integer"
            format: "int32"
            default: "10"
        - name: "sortBy"
          in: "query"
          required: false
          schema:
            type: "string"
            default: "postedOn"
        - name: "direction"
          in: "query"
          required: false
          schema:
            type: "string"
            default: "desc"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemResponse"
  /api/v1/items/{id}:
    get:
      summary: "Get item by ID"
      description: "Retrieves an item by its unique identifier"
      operationId: ""
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemResponse"
    put:
      summary: "Update an existing item"
      description: "Updates an item with the provided data"
      operationId: ""
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ItemRequest"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemResponse"
    delete:
      summary: "Delete an item"
      description: "Soft deletes an item by marking it as inactive"
      operationId: ""
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Void"
  /api/v1/items/available:
    get:
      summary: "Get paginated list of available items"
      description: "Retrieves a paginated list of items that are active and not taken"
      operationId: ""
      parameters:
        - name: "page"
          in: "query"
          required: false
          schema:
            type: "integer"
            format: "int32"
            default: "0"
        - name: "size"
          in: "query"
          required: false
          schema:
            type: "integer"
            format: "int32"
            default: "10"
        - name: "sortBy"
          in: "query"
          required: false
          schema:
            type: "string"
            default: "postedOn"
        - name: "direction"
          in: "query"
          required: false
          schema:
            type: "string"
            default: "desc"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemResponse"
  /api/v1/items/search:
    get:
      summary: "Search items by keyword"
      description:
        "Searches for items containing the specified keyword in title or\
        \ description"
      operationId: ""
      parameters:
        - name: "keyword"
          in: "query"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemResponse"
  /api/v1/items/{id}/taken:
    patch:
      summary: "Mark an item as taken"
      description: "Updates an item's status to indicate it has been taken"
      operationId: ""
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemResponse"
  /api/v1/items/user/{userId}:
    get:
      summary: "Get all items from a specific user"
      description: "Retrieves all active items posted by the specified user"
      operationId: ""
      parameters:
        - name: "userId"
          in: "path"
          required: false
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/ItemResponse"
  /api/v1/items/category/{categoryId}:
    get:
      summary: "Get items by category"
      description: "Retrieves a paginated list of items in the specified category"
      operationId: ""
      parameters:
        - name: "categoryId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemResponse"
  /api/v1/items/type/{itemType}:
    get:
      summary: "Get items by type"
      description:
        "Retrieves a paginated list of items of the specified type (INTERNAL\
        \ or EXTERNAL)"
      operationId: ""
      parameters:
        - name: "itemType"
          in: "path"
          required: true
          schema:
            type: "string"
            enum:
              - "INTERNAL"
              - "EXTERNAL"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemResponse"
  /api/v1/items/platform/{platformId}:
    get:
      summary: "Get items by source platform"
      description:
        "Retrieves a paginated list of items from the specified source\
        \ platform"
      operationId: ""
      parameters:
        - name: "platformId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemResponse"
  /api/v1/items/batch:
    post:
      summary: "Batch create items"
      description: "Creates multiple items in a single request for better performance"
      operationId: ""
      requestBody:
        content:
          application/json:
            schema:
              type: "array"
              items:
                $ref: "#/components/schemas/ItemRequest"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "string"
  /api/v1/items/{id}/available:
    get:
      summary: "Check if an item is available"
      description: "Checks if an item exists, is active, and not taken"
      operationId: ""
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "string"
components:
  schemas:
    Instant:
      type: "object"
      properties: {}
    ItemRequest:
      type: "object"
      properties:
        title:
          type: "string"
          nullable: true
        description:
          type: "string"
          nullable: true
        address:
          type: "string"
          nullable: true
        imageUrl:
          type: "string"
          nullable: true
        itemType:
          type: "string"
          nullable: true
          enum:
            - "INTERNAL"
            - "EXTERNAL"
        externalUrl:
          type: "string"
          nullable: true
        originalPostedOn:
          nullable: true
          $ref: "#/components/schemas/Instant"
        pickupInstructions:
          type: "string"
          nullable: true
        conditionDescription:
          type: "string"
          nullable: true
        categoryId:
          type: "integer"
          format: "int64"
          nullable: true
        sourcePlatformId:
          type: "integer"
          format: "int64"
          nullable: true
    CategoryDto:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
          nullable: true
        name:
          type: "string"
          nullable: true
        description:
          type: "string"
          nullable: true
        parentId:
          type: "integer"
          format: "int64"
          nullable: true
        parentTitle:
          type: "string"
          nullable: true
        createdAt:
          type: "string"
          format: "date-time"
          nullable: true
        active:
          type: "boolean"
          nullable: true
    SourcePlatformDto:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
          nullable: true
        name:
          type: "string"
          nullable: true
    ItemResponse:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
          nullable: true
        title:
          type: "string"
          nullable: true
        description:
          type: "string"
          nullable: true
        address:
          type: "string"
          nullable: true
        isTaken:
          type: "boolean"
          nullable: true
        postedOn:
          nullable: true
          $ref: "#/components/schemas/Instant"
        updatedAt:
          nullable: true
          $ref: "#/components/schemas/Instant"
        imageUrl:
          type: "string"
          nullable: true
        itemType:
          type: "string"
          nullable: true
          enum:
            - "INTERNAL"
            - "EXTERNAL"
        externalUrl:
          type: "string"
          nullable: true
        originalPostedOn:
          nullable: true
          $ref: "#/components/schemas/Instant"
        pickupInstructions:
          type: "string"
          nullable: true
        conditionDescription:
          type: "string"
          nullable: true
        active:
          type: "boolean"
          nullable: true
        user:
          type: "string"
          format: "uuid"
          nullable: true
        category:
          nullable: true
          $ref: "#/components/schemas/CategoryDto"
        sourcePlatform:
          nullable: true
          $ref: "#/components/schemas/SourcePlatformDto"
    Void:
      type: "object"
      properties: {}
