openapi: 3.1.0
info:
  title: OpenAPI definition
  version: v0
servers:
- url: http://localhost:8080
  description: Generated server url
tags:
- name: Item API
  description: Item management operations
paths:
  /api/v1/items/{id}:
    get:
      tags:
      - Item API
      summary: Get item by ID
      description: Retrieves an item by its unique identifier
      operationId: getItemById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Item found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemResponse"
        "404":
          description: Item not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemResponse"
    put:
      tags:
      - Item API
      summary: Update an existing item
      description: Updates an item with the provided data
      operationId: updateItem
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ItemRequest"
        required: true
      responses:
        "200":
          description: Item updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemResponse"
        "400":
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemResponse"
        "404":
          description: Item not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemResponse"
    delete:
      tags:
      - Item API
      summary: Delete an item
      description: Soft deletes an item by marking it as inactive
      operationId: deleteItem
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: Item deleted successfully
        "404":
          description: Item not found
  /api/v1/items:
    get:
      tags:
      - Item API
      summary: Get paginated list of all active items
      description: Retrieves a paginated list of all active items with sorting options
      operationId: getAllItems
      parameters:
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
          minimum: 0
      - name: size
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 10
          maximum: 100
          minimum: 1
      - name: sortBy
        in: query
        required: false
        schema:
          type: string
          default: postedOn
      - name: direction
        in: query
        required: false
        schema:
          type: string
          default: desc
      responses:
        "200":
          description: Items retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageItemResponse"
    post:
      tags:
      - Item API
      summary: Create a new item
      description: Creates a new item with the provided data
      operationId: createItem
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ItemRequest"
        required: true
      responses:
        "201":
          description: Item created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemResponse"
        "400":
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemResponse"
        "422":
          description: Item could not be processed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemResponse"
  /api/v1/items/batch:
    post:
      tags:
      - Item API
      summary: Batch create items
      description: Creates multiple items in a single request for better performance
      operationId: batchCreateItems
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/ItemRequest"
        required: true
      responses:
        "201":
          description: Items created successfully
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: object
        "400":
          description: Invalid input data
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: object
  /api/v1/items/{id}/taken:
    patch:
      tags:
      - Item API
      summary: Mark an item as taken
      description: Updates an item's status to indicate it has been taken
      operationId: markItemAsTaken
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Item marked as taken successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemResponse"
        "404":
          description: Item not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemResponse"
  /api/v1/items/{id}/available:
    get:
      tags:
      - Item API
      summary: Check if an item is available
      description: "Checks if an item exists, is active, and not taken"
      operationId: isItemAvailable
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Availability check completed
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: object
  /api/v1/items/user/{userId}:
    get:
      tags:
      - Item API
      summary: Get all items from a specific user
      description: Retrieves all active items posted by the specified user
      operationId: getUserItems
      responses:
        "200":
          description: Items retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ItemResponse"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ItemResponse"
  /api/v1/items/type/{itemType}:
    get:
      tags:
      - Item API
      summary: Get items by type
      description: Retrieves a paginated list of items of the specified type (INTERNAL
        or EXTERNAL)
      operationId: getItemsByType
      parameters:
      - name: itemType
        in: path
        required: true
        schema:
          type: string
          enum:
          - INTERNAL
          - EXTERNAL
      - name: pageable
        in: query
        required: true
        schema:
          $ref: "#/components/schemas/Pageable"
      responses:
        "200":
          description: Items retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageItemResponse"
        "400":
          description: Invalid item type
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageItemResponse"
  /api/v1/items/search:
    get:
      tags:
      - Item API
      summary: Search items by keyword
      description: Searches for items containing the specified keyword in title or
        description
      operationId: searchItems
      parameters:
      - name: keyword
        in: query
        required: true
        schema:
          type: string
      - name: pageable
        in: query
        required: true
        schema:
          $ref: "#/components/schemas/Pageable"
      responses:
        "200":
          description: Search completed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageItemResponse"
  /api/v1/items/platform/{platformId}:
    get:
      tags:
      - Item API
      summary: Get items by source platform
      description: Retrieves a paginated list of items from the specified source platform
      operationId: getItemsBySourcePlatform
      parameters:
      - name: platformId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: pageable
        in: query
        required: true
        schema:
          $ref: "#/components/schemas/Pageable"
      responses:
        "200":
          description: Items retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageItemResponse"
        "404":
          description: Source platform not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageItemResponse"
  /api/v1/items/category/{categoryId}:
    get:
      tags:
      - Item API
      summary: Get items by category
      description: Retrieves a paginated list of items in the specified category
      operationId: getItemsByCategory
      parameters:
      - name: categoryId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: pageable
        in: query
        required: true
        schema:
          $ref: "#/components/schemas/Pageable"
      responses:
        "200":
          description: Items retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageItemResponse"
        "404":
          description: Category not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageItemResponse"
  /api/v1/items/available:
    get:
      tags:
      - Item API
      summary: Get paginated list of available items
      description: Retrieves a paginated list of items that are active and not taken
      operationId: getAvailableItems
      parameters:
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
          minimum: 0
      - name: size
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 10
          maximum: 100
          minimum: 1
      - name: sortBy
        in: query
        required: false
        schema:
          type: string
          default: postedOn
      - name: direction
        in: query
        required: false
        schema:
          type: string
          default: desc
      responses:
        "200":
          description: Available items retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageItemResponse"
  /api/v1/categories:
    get:
      tags:
      - category-controller
      operationId: getAllCategories
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CategoryDto"
  /api/v1/categories/{parentId}/subcategories:
    get:
      tags:
      - category-controller
      operationId: getSubcategories
      parameters:
      - name: parentId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CategoryDto"
  /api/v1/categories/{id}:
    get:
      tags:
      - category-controller
      operationId: getCategoryById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CategoryDto"
  /api/v1/categories/root:
    get:
      tags:
      - category-controller
      operationId: getRootCategories
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CategoryDto"
components:
  schemas:
    ItemRequest:
      type: object
      properties:
        title:
          type: string
          maxLength: 150
          minLength: 0
        description:
          type: string
          minLength: 1
        address:
          type: string
          minLength: 1
        imageUrl:
          type: string
        itemType:
          type: string
          enum:
          - INTERNAL
          - EXTERNAL
        externalUrl:
          type: string
        originalPostedOn:
          type: string
          format: date-time
        pickupInstructions:
          type: string
        conditionDescription:
          type: string
        categoryId:
          type: integer
          format: int64
        sourcePlatformId:
          type: integer
          format: int64
      required:
      - itemType
    CategoryDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        parentId:
          type: integer
          format: int64
        parentTitle:
          type: string
        createdAt:
          type: string
          format: date-time
        active:
          type: boolean
    ItemResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        description:
          type: string
        address:
          type: string
        postedOn:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        imageUrl:
          type: string
        itemType:
          type: string
          enum:
          - INTERNAL
          - EXTERNAL
        externalUrl:
          type: string
        originalPostedOn:
          type: string
          format: date-time
        pickupInstructions:
          type: string
        conditionDescription:
          type: string
        active:
          type: boolean
        user:
          type: string
          format: uuid
        category:
          $ref: "#/components/schemas/CategoryDto"
        sourcePlatform:
          $ref: "#/components/schemas/SourcePlatformDto"
        taken:
          type: boolean
    SourcePlatformDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    PageItemResponse:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        first:
          type: boolean
        last:
          type: boolean
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: "#/components/schemas/ItemResponse"
        number:
          type: integer
          format: int32
        sort:
          $ref: "#/components/schemas/SortObject"
        pageable:
          $ref: "#/components/schemas/PageableObject"
        numberOfElements:
          type: integer
          format: int32
        empty:
          type: boolean
    PageableObject:
      type: object
      properties:
        offset:
          type: integer
          format: int64
        sort:
          $ref: "#/components/schemas/SortObject"
        unpaged:
          type: boolean
        paged:
          type: boolean
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
    SortObject:
      type: object
      properties:
        empty:
          type: boolean
        unsorted:
          type: boolean
        sorted:
          type: boolean
    Pageable:
      type: object
      properties:
        page:
          type: integer
          format: int32
          minimum: 0
        size:
          type: integer
          format: int32
          minimum: 1
        sort:
          type: array
          items:
            type: string
