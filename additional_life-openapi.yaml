openapi: 3.1.0
info:
  title: OpenAPI definition
  version: v0
servers:
- url: http://localhost:8080
  description: Generated server url
tags:
- name: Public User API
  description: Public user operations
- name: User API
  description: User operations
- name: Item API
  description: Item operations
- name: Public Category API
  description: Public category operations
- name: Public Item API
  description: Public item operations
paths:
  /api/v1/users/{id}:
    get:
      tags:
      - User API
      summary: Get user by ID
      description: Retrieves a user by their unique identifier
      operationId: getUserById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: User found
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserResponse"
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserResponse"
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserResponse"
        "404":
          description: User not found
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserResponse"
    put:
      tags:
      - User API
      summary: Update an existing user
      description: Updates a user with the provided data
      operationId: updateUser
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserRequest"
        required: true
      responses:
        "200":
          description: User updated successfully
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserResponse"
        "400":
          description: Invalid input data
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserResponse"
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserResponse"
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserResponse"
        "404":
          description: User not found
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserResponse"
    delete:
      tags:
      - User API
      summary: Delete a user
      description: Deletes a user by their unique identifier
      operationId: deleteUser
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "204":
          description: User deleted successfully
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: User not found
  /api/v1/items/{id}:
    put:
      tags:
      - Item API
      summary: Update an existing item
      description: Updates an item with the provided data
      operationId: updateItem
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ItemRequest"
        required: true
      responses:
        "200":
          description: Item updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemResponse"
        "400":
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemResponse"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemResponse"
        "404":
          description: Item not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemResponse"
    delete:
      tags:
      - Item API
      summary: Delete an item
      description: Soft deletes an item by marking it as inactive
      operationId: deleteItem
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "204":
          description: Item deleted successfully
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Item not found
  /api/v1/public/users:
    post:
      tags:
      - Public User API
      summary: Create a new user
      description: Creates a new user with the provided data
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserRequest"
        required: true
      responses:
        "201":
          description: User created successfully
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserResponse"
        "400":
          description: Invalid input data
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserResponse"
  /api/v1/items:
    post:
      tags:
      - Item API
      summary: Create a new item
      description: Creates a new item with the provided data
      operationId: createItem
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ItemRequest"
        required: true
      responses:
        "201":
          description: Item created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemResponse"
        "400":
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemResponse"
        "422":
          description: Item could not be processed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemResponse"
  /api/v1/items/{id}/status:
    post:
      tags:
      - Item API
      summary: Change item status
      description: Change the status of an item
      operationId: changeItemStatus
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ItemStatusRequest"
        required: true
      responses:
        "200":
          description: Item marked as taken successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemResponse"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemResponse"
        "404":
          description: Item not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemResponse"
  /api/v1/users:
    get:
      tags:
      - User API
      summary: Get all users (Admin only)
      description: Retrieves a list of all users. Currently restricted.
      operationId: getAllUsers
      responses:
        "200":
          description: Users retrieved successfully (if admin)
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserResponse"
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserResponse"
        "403":
          description: Forbidden (if not admin)
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserResponse"
  /api/v1/users/supabase/{supabaseId}:
    get:
      tags:
      - User API
      summary: Get user by Supabase ID
      description: Retrieves a user by their Supabase ID
      operationId: getUserBySupabaseId
      parameters:
      - name: supabaseId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: User found
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserResponse"
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserResponse"
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserResponse"
        "404":
          description: User not found
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserResponse"
  /api/v1/users/email/{email}:
    get:
      tags:
      - User API
      summary: Get user by email
      description: Retrieves a user by their email address
      operationId: getUserByEmail
      parameters:
      - name: email
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: User found
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserResponse"
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserResponse"
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserResponse"
        "404":
          description: User not found
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserResponse"
  /api/v1/public/items:
    get:
      tags:
      - Public Item API
      summary: Get paginated list of available items
      description: Retrieves a paginated list of items that are active and not taken
      operationId: getItems
      parameters:
      - name: query
        in: query
        description: Full-text search query
        required: false
        schema:
          type: string
      - name: category
        in: query
        description: Item category
        required: false
        schema:
          type: string
          format: uuid
      - name: condition
        in: query
        description: Item condition
        required: false
        schema:
          type: string
      - name: sortBy
        in: query
        description: Sort field
        required: false
        schema:
          type: string
          default: createdAt
        example: createdAt
      - name: sortDirection
        in: query
        description: Sort direction
        required: false
        schema:
          type: string
          enum:
          - asc
          - desc
        example: desc
      - name: page
        in: query
        description: Page number (zero-based)
        required: false
        schema:
          type: integer
          format: int32
          default: 0
          minimum: 0
      - name: size
        in: query
        description: Page size
        required: false
        schema:
          type: integer
          format: int32
          default: 20
          minimum: 1
      responses:
        "200":
          description: Available items retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageItemResponse"
  /api/v1/public/items/{id}:
    get:
      tags:
      - Public Item API
      summary: Get item by ID
      description: Retrieves an item by its unique identifier
      operationId: getItemById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: Item found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemResponse"
        "404":
          description: Item not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemResponse"
  /api/v1/public/categories:
    get:
      tags:
      - Public Category API
      summary: Get all categories
      description: Retrieves a list of all categories
      operationId: getAllCategories
      responses:
        "200":
          description: Categories retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CategoryResponse"
  /api/v1/public/categories/{parentId}/subcategories:
    get:
      tags:
      - Public Category API
      summary: Get subcategories by parent ID
      description: Retrieves a list of subcategories for a given parent category ID
      operationId: getSubcategories
      parameters:
      - name: parentId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: Subcategories retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CategoryResponse"
        "404":
          description: Parent category not found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CategoryResponse"
  /api/v1/public/categories/{id}:
    get:
      tags:
      - Public Category API
      summary: Get category by ID
      description: Retrieves a category by its unique identifier
      operationId: getCategoryById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: Category found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryResponse"
        "404":
          description: Category not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryResponse"
  /api/v1/public/categories/root:
    get:
      tags:
      - Public Category API
      summary: Get root categories
      description: Retrieves a list of all root categories (categories without a parent)
      operationId: getRootCategories
      responses:
        "200":
          description: Root categories retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CategoryResponse"
  /api/v1/public/categories/featured:
    get:
      tags:
      - Public Category API
      summary: Get featured categories
      description: Retrieves a list of featured categories
      operationId: getFeaturedCategories
      responses:
        "200":
          description: Featured categories retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CategoryResponse"
  /api/v1/ping:
    get:
      tags:
      - ping-controller
      operationId: ping
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
  /api/v1/items/user/{userId}:
    get:
      tags:
      - Item API
      summary: Get all items from a specific user
      description: Retrieves all active items posted by the specified user
      operationId: getUserItems
      responses:
        "200":
          description: Items retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ItemResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ItemResponse"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ItemResponse"
components:
  schemas:
    UpdateUserRequest:
      type: object
      properties:
        name:
          type: string
          maxLength: 100
          minLength: 0
        email:
          type: string
          minLength: 1
        phoneNumber:
          type: string
          maxLength: 15
          minLength: 0
        address:
          type: string
          maxLength: 255
          minLength: 0
        bio:
          type: string
        avatarUrl:
          type: string
        preferredLanguage:
          type: string
          enum:
          - ENGLISH
          - FRENCH
          - GERMAN
        isEmailVerified:
          type: boolean
        isPhoneVerified:
          type: boolean
        contactOptions:
          type: array
          items:
            type: string
            enum:
            - CHAT
            - EMAIL
            - PHONE
            - WHATSAPP
    UserResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        supabaseId:
          type: string
          format: uuid
        name:
          type: string
        email:
          type: string
        phoneNumber:
          type: string
        address:
          type: string
        bio:
          type: string
        avatarUrl:
          type: string
        preferredLanguage:
          type: string
          enum:
          - ENGLISH
          - FRENCH
          - GERMAN
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        isEmailVerified:
          type: boolean
        isPhoneVerified:
          type: boolean
        active:
          type: boolean
    ItemRequest:
      type: object
      properties:
        title:
          type: string
          maxLength: 150
          minLength: 0
        description:
          type: string
          minLength: 1
        condition:
          type: string
          enum:
          - NEW
          - LIKE_NEW
          - USED
          - DEFECTIVE
        address:
          type: string
          minLength: 1
        isPickupPossible:
          type: boolean
        isShippingPossible:
          type: boolean
        imageUrls:
          type: array
          items:
            type: string
        categoryId:
          type: string
          format: uuid
      required:
      - categoryId
      - condition
      - imageUrls
      - isPickupPossible
      - isShippingPossible
    CategoryResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        imageUrl:
          type: string
        parentId:
          type: string
          format: uuid
        parentTitle:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        active:
          type: boolean
    ItemResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        condition:
          type: string
          enum:
          - NEW
          - LIKE_NEW
          - USED
          - DEFECTIVE
        address:
          type: string
        isPickupPossible:
          type: boolean
        isShippingPossible:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        imageUrls:
          type: array
          items:
            type: string
        itemType:
          type: string
          enum:
          - INTERNAL
          - EXTERNAL
        externalUrl:
          type: string
        status:
          type: string
          enum:
          - AVAILABLE
          - TAKEN
        active:
          type: boolean
        owner:
          $ref: "#/components/schemas/MinimalUserResponse"
        category:
          $ref: "#/components/schemas/CategoryResponse"
        sourceExternalPlatform:
          type: string
          enum:
          - ANIBIS
    MinimalUserResponse:
      type: object
      properties:
        id:
          type: string
        supabaseId:
          type: string
        name:
          type: string
        avatarUrl:
          type: string
    CreateUserRequest:
      type: object
      properties:
        supabaseId:
          type: string
          format: uuid
        name:
          type: string
          maxLength: 100
          minLength: 0
        email:
          type: string
          minLength: 1
        authProvider:
          type: string
          enum:
          - SUPBASE
          - GOOGLE
          - FACEBOOK
        avatarUrl:
          type: string
        isEmailVerified:
          type: boolean
        isPhoneVerified:
          type: boolean
      required:
      - authProvider
      - supabaseId
    ItemStatusRequest:
      type: object
      properties:
        status:
          type: string
          enum:
          - AVAILABLE
          - TAKEN
      required:
      - status
    PageItemResponse:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: "#/components/schemas/ItemResponse"
        number:
          type: integer
          format: int32
        sort:
          $ref: "#/components/schemas/SortObject"
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: "#/components/schemas/PageableObject"
        empty:
          type: boolean
    PageableObject:
      type: object
      properties:
        offset:
          type: integer
          format: int64
        sort:
          $ref: "#/components/schemas/SortObject"
        unpaged:
          type: boolean
        paged:
          type: boolean
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
    SortObject:
      type: object
      properties:
        empty:
          type: boolean
        unsorted:
          type: boolean
        sorted:
          type: boolean
