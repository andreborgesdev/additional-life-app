openapi: "3.1.0"
info:
  title: "additional_life API"
  description: "additional_life API"
  version: "1.0.0"
servers:
  - url: "https://localhost:8080"
    description: "Local server"
tags:
  - name: "Item API"
    description: "Item management operations"
paths:
  /api/v1/users/register:
    post:
      summary: "POST api/v1/users/register"
      operationId: "registerUser"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRegistrationDto"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserResponseDto"
  /api/v1/users/login:
    post:
      summary: "POST api/v1/users/login"
      operationId: "loginUser"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserLoginDto"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /api/v1/users/{username}:
    get:
      summary: "GET api/v1/users/{username}"
      operationId: "getUserByUsername"
      parameters:
        - name: "username"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserResponseDto"
  /api/v1/categories:
    get:
      summary: "GET api/v1/categories"
      operationId: "getAllCategories"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/CategoryDTO"
  /api/v1/categories/{id}:
    get:
      summary: "GET api/v1/categories/{id}"
      operationId: "getCategoryById"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CategoryDTO"
  /api/v1/categories/root:
    get:
      summary: "GET api/v1/categories/root"
      operationId: "getRootCategories"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/CategoryDTO"
  /api/v1/categories/{parentId}/subcategories:
    get:
      summary: "GET api/v1/categories/{parentId}/subcategories"
      operationId: "getSubcategories"
      parameters:
        - name: "parentId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/CategoryDTO"
  /api/v1/items/{id}:
    put:
      summary: "Update an existing item"
      description: ""
      operationId: ""
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ItemRequest"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ItemResponse"
    delete:
      summary: "Delete an item (mark as inactive)"
      description: ""
      operationId: ""
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Void"
    get:
      summary: "Get item by ID"
      description: ""
      operationId: ""
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ItemResponse"
  /api/v1/items/{id}/mark-taken:
    put:
      summary: "Mark an item as taken"
      description: ""
      operationId: ""
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ItemResponse"
  /api/v1/items:
    post:
      summary: "Create a new item"
      description: ""
      operationId: ""
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ItemRequest"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ItemResponse"
    get:
      summary: "Get paginated list of all active items"
      description: ""
      operationId: ""
      parameters:
        - name: "page"
          in: "query"
          required: false
          schema:
            type: "integer"
            format: "int32"
            default: "0"
        - name: "size"
          in: "query"
          required: false
          schema:
            type: "integer"
            format: "int32"
            default: "10"
        - name: "sortBy"
          in: "query"
          required: false
          schema:
            type: "string"
            default: "postedOn"
        - name: "direction"
          in: "query"
          required: false
          schema:
            type: "string"
            default: "desc"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ItemResponse"
  /api/v1/items/available:
    get:
      summary: "Get paginated list of available items (not taken)"
      description: ""
      operationId: ""
      parameters:
        - name: "page"
          in: "query"
          required: false
          schema:
            type: "integer"
            format: "int32"
            default: "0"
        - name: "size"
          in: "query"
          required: false
          schema:
            type: "integer"
            format: "int32"
            default: "10"
        - name: "sortBy"
          in: "query"
          required: false
          schema:
            type: "string"
            default: "postedOn"
        - name: "direction"
          in: "query"
          required: false
          schema:
            type: "string"
            default: "desc"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ItemResponse"
  /api/v1/items/search:
    get:
      summary: "Search items by keyword"
      description: ""
      operationId: ""
      parameters:
        - name: "keyword"
          in: "query"
          required: true
          schema:
            type: "string"
        - name: "page"
          in: "query"
          required: false
          schema:
            type: "integer"
            format: "int32"
            default: "0"
        - name: "size"
          in: "query"
          required: false
          schema:
            type: "integer"
            format: "int32"
            default: "10"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ItemResponse"
  /api/v1/items/user/{userId}:
    get:
      summary: "Get all items from a specific user"
      description: ""
      operationId: ""
      parameters:
        - name: "userId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/ItemResponse"
  /api/v1/items/category/{categoryId}:
    get:
      summary: "Get items by category"
      description: ""
      operationId: ""
      parameters:
        - name: "categoryId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
        - name: "page"
          in: "query"
          required: false
          schema:
            type: "integer"
            format: "int32"
            default: "0"
        - name: "size"
          in: "query"
          required: false
          schema:
            type: "integer"
            format: "int32"
            default: "10"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ItemResponse"
  /api/v1/items/type/{itemType}:
    get:
      summary: "Get items by type (INTERNAL or EXTERNAL)"
      description: ""
      operationId: ""
      parameters:
        - name: "itemType"
          in: "path"
          required: true
          schema:
            type: "string"
            enum:
              - "INTERNAL"
              - "EXTERNAL"
        - name: "page"
          in: "query"
          required: false
          schema:
            type: "integer"
            format: "int32"
            default: "0"
        - name: "size"
          in: "query"
          required: false
          schema:
            type: "integer"
            format: "int32"
            default: "10"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ItemResponse"
  /api/v1/items/platform/{platformId}:
    get:
      summary: "Get items by source platform"
      description: ""
      operationId: ""
      parameters:
        - name: "platformId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
        - name: "page"
          in: "query"
          required: false
          schema:
            type: "integer"
            format: "int32"
            default: "0"
        - name: "size"
          in: "query"
          required: false
          schema:
            type: "integer"
            format: "int32"
            default: "10"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ItemResponse"
components:
  schemas:
    UserRegistrationDto:
      type: "object"
      properties:
        fullName:
          type: "string"
        username:
          type: "string"
        email:
          type: "string"
        password:
          type: "string"
        address:
          type: "string"
        birthDate:
          type: "string"
          format: "date"
    UserResponseDto:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        fullName:
          type: "string"
        username:
          type: "string"
        email:
          type: "string"
        address:
          type: "string"
        birthDate:
          type: "string"
          format: "date"
        active:
          type: "boolean"
    UserLoginDto:
      type: "object"
      properties:
        username:
          type: "string"
        password:
          type: "string"
    CategoryDTO:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        title:
          type: "string"
        description:
          type: "string"
        parentId:
          type: "integer"
          format: "int64"
        parentTitle:
          type: "string"
        createdAt:
          type: "string"
          format: "date-time"
        active:
          type: "boolean"
    ItemRequest:
      type: "object"
      properties:
        title:
          type: "string"
        description:
          type: "string"
        address:
          type: "string"
        imageUrl:
          type: "string"
        itemType:
          type: "string"
          enum:
            - "INTERNAL"
            - "EXTERNAL"
        externalUrl:
          type: "string"
        originalPostedOn:
          type: "string"
          format: "date-time"
        pickupInstructions:
          type: "string"
        conditionDescription:
          type: "string"
        userId:
          type: "integer"
          format: "int64"
        categoryId:
          type: "integer"
          format: "int64"
        sourcePlatformId:
          type: "integer"
          format: "int64"
    UserSummaryDto:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        username:
          type: "string"
        email:
          type: "string"
    CategoryDto:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        name:
          type: "string"
    SourcePlatformDto:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        name:
          type: "string"
    ItemResponse:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        title:
          type: "string"
        description:
          type: "string"
        address:
          type: "string"
        postedOn:
          type: "string"
          format: "date-time"
        updatedAt:
          type: "string"
          format: "date-time"
        imageUrl:
          type: "string"
        itemType:
          type: "string"
          enum:
            - "INTERNAL"
            - "EXTERNAL"
        externalUrl:
          type: "string"
        originalPostedOn:
          type: "string"
          format: "date-time"
        pickupInstructions:
          type: "string"
        conditionDescription:
          type: "string"
        active:
          type: "boolean"
        user:
          $ref: "#/components/schemas/UserSummaryDto"
        category:
          $ref: "#/components/schemas/CategoryDto"
        sourcePlatform:
          $ref: "#/components/schemas/SourcePlatformDto"
    Void:
      type: "object"
      properties: { }